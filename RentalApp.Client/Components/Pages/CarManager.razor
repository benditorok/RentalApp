@using RentalApp.Client.RestApi;
@using RentalApp.Model;
@page "/carmgr"
@inject IRestService RestService;


<h1>Car management interface</h1>

<hr />
<p>Add a car</p>
<form class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
    <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="username">
            Make
            <input type="text" @bind="carMake" /><br />
        </label>
    </div>
    <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="username">
            Model
            <input type="text" @bind="carModel" /><br />
        </label>
    </div>
    <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="username">
            Year
            <input type="text" @bind="carYear" /><br />
        </label>
    </div>
    <div class="mb-4">
        <label class="block text-gray-700 text-sm font-bold mb-2" for="username">
            Daily Cost
            <input type="text" @bind="carDailyCost" /><br />
        </label>
    </div>
    <div class="flex items-center justify-between">
        <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" @onclick="CreateCar">
            Submit
        </button>
    </div>
</form>

<hr />
<p>List all cars</p>
<button class="mt-4 bg-gradient-to-br from-green-700 to-green-600 hover:from-green-600 hover:to-green-700 text-white p-2 rounded border border-green-500" @onclick="GetCars">Get cars</button>
@if (errMsg is not null)
{
    <p>@errMsg</p>
}

@if (cars is not null)
{
    @foreach (Car item in cars)
    {
        <p>@($"id:{item.CarId}, make:{item.Make}, model:{item.Model}")</p>
    }
}


@code {
    private string? errMsg = null!;

    private string carMake = "";

    private string carModel = "";

    private int carYear = 0;

    private decimal carDailyCost = 0;

    private IEnumerable<Car> cars = null!;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task GetCars()
    {
        try
        {
            cars = await RestService.GetAsync<Car>("Car");
        }
        catch (Exception ex)
        {
            errMsg = ex.Message;
        }
    }

    private async Task CreateCar()
    {
        try
        {
            var car = new Car(carMake, carModel, carYear, carDailyCost);

            await RestService.PostAsync(car, "Car");
        }
        catch (Exception ex)
        {
            errMsg = ex.Message;
        }
    }
}
