@page "/manager/car"
@using RentalApp.Client.Services;
@using RentalApp.Model;
@using RentalApp.Client.Components.Layout;
@inject IConnectionService ConnectionService;

<PopupMessage @ref="_popupMessage" />

<h1>Car management interface</h1>
<hr />

<h2>Add a car</h2>
<div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
    <label class="mb-4 block text-gray-700 text-sm font-bold">
        Make
        <br />
        <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="Volkswagen" type="text" @bind="_createCar.Make" />
    </label>
    <label class="mb-4 block text-gray-700 text-sm font-bold">
        Model
        <br />
        <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="Golf" type="text" @bind="_createCar.Model" />
    </label>
    <label class="mb-4 block text-gray-700 text-sm font-bold">
        Year
        <br />
        <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="2020" type="number" @bind="_createCar.Year" />
    </label>
    <label class="mb-4 block text-gray-700 text-sm font-bold">
        Daily cost
        <br />
        <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="80" type="number" @bind="_createCar.DailyCost" />
    </label>

    <button class="mb-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline rounded-full" @onclick="CreateAsync">
        Submit
    </button>
</div>
<hr />

<h2>Get a car</h2>
<div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
    <label class="mb-4 block text-gray-700 text-sm font-bold">
        Car Id
        <br />
        <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="1" type="number" @bind="_readCarId" />
    </label>

    <button class="mb-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline rounded-full" @onclick="ReadAsync">
        Submit
    </button>

    @if (_readCar is not null)
    {
        <div class="bg-gray-100 shadow-md rounded px-8 py-6 mb-4">
            @_readCar.ToString()
        </div>
    }
</div>
<hr />

<h2>Update a car</h2>
<div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
    <label class="mb-4 block text-gray-700 text-sm font-bold">
        Car Id
        <br />
        <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="1" type="number" @bind="_updateCarId" />
    </label>

    <button class="mb-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline rounded-full" @onclick="UpdateAsync">
        Submit
    </button>

    @if (_updateCar is not null)
    {
        <div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
            <label class="mb-4 block text-gray-700 text-sm font-bold">
                Make
                <br />
                <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="Volkswagen" type="text" @bind="_updateCar.Make" />
            </label>
            <label class="mb-4 block text-gray-700 text-sm font-bold">
                Model
                <br />
                <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="Golf" type="text" @bind="_updateCar.Model" />
            </label>
            <label class="mb-4 block text-gray-700 text-sm font-bold">
                Year
                <br />
                <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="2020" type="number" @bind="_updateCar.Year" />
            </label>
            <label class="mb-4 block text-gray-700 text-sm font-bold">
                Daily cost
                <br />
                <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="80" type="number" @bind="_updateCar.DailyCost" />
            </label>

            <button class="mb-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline rounded-full" @onclick="UpdateAsync">
                Submit
            </button>
        </div>
    }
</div>
<hr />

<h2>Delete a car</h2>
<div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
    <label class="mb-4 block text-gray-700 text-sm font-bold">
        Car Id
        <br />
        <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" placeholder="1" type="number" @bind="_deleteCarId" />
    </label>

    <button class="mb-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline rounded-full" @onclick="DeleteAsync">
        Submit
    </button>
</div>
<hr />

<h2>Get all cars</h2>
<div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
    <button class="mb-4 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline rounded-full" @onclick="ReadAllAsync">
        Submit
    </button>

    @if (_readallCars is not null)
    {
        <div class="bg-gray-100 shadow-md rounded px-8 py-6 mb-4">
            @foreach (var item in _readallCars)
            {
                @item.ToString() <br />
            }
        </div>
    }
</div>
<hr />


@code {
    // Popup message
    private PopupMessage _popupMessage = new();

    // Create field
    private Car _createCar = new();

    // Read field
    private int? _readCarId;
    private Car? _readCar;

    // Update field
    private int? _updateCarId;
    private Car? _updateCar;

    // Delete field
    private int? _deleteCarId;

    // ReadAll field
    private IEnumerable<Car>? _readallCars;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task CreateAsync()
    {
        try
        {
            await ConnectionService.PostAsync<Car>(_createCar, "Car");
            await _popupMessage.ShowNew("Creation was successful!", true);
        }
        catch (Exception ex)
        {
            await _popupMessage.ShowNew("Creation failed! " + ex.Message);
        }
        finally
        {
            _createCar = new();
        }
    }

    private async Task ReadAsync()
    {
        try
        {
            _readCar = await ConnectionService.GetAsync<Car>(_readCarId ?? 0, "Car");
        }
        catch (Exception ex)
        {
            await _popupMessage.ShowNew("Reading failed! " + ex.Message);
        }
    }

    private async Task UpdateAsync()
    {
        try
        {
            if (_updateCar is null)
            {
                _updateCar = await ConnectionService.GetAsync<Car>(_updateCarId ?? 0, "Car");
            }
            else
            {
                await ConnectionService.PutAsync<Car>(_updateCar, "Car");
                await _popupMessage.ShowNew("Update was successful!", true);
                _updateCar = null;
            }
        }
        catch (Exception ex)
        {
            await _popupMessage.ShowNew("Update failed! " + ex.Message);
            _updateCar = null;
        }
    }

    private async Task DeleteAsync()
    {
        try
        {
            await ConnectionService.DeleteAsync(_deleteCarId ?? 0, "Car");
            await _popupMessage.ShowNew("Deletion was successful!", true);
        }
        catch (Exception ex)
        {
            await _popupMessage.ShowNew("Deletion failed! " + ex.Message);
        }
    }

    private async Task ReadAllAsync()
    {
        try
        {
            _readallCars = await ConnectionService.GetAsync<Car>("Car");
        }
        catch (Exception ex)
        {
            await _popupMessage.ShowNew("Reading failed! " + ex.Message);
        }
    }
}
